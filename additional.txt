
<!-- 
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Sign Up | Log In</title>
    <link rel="stylesheet" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <div class="wrapper">
       <div class="title-text">
          <div class="title login">
             Login
          </div>
          <div class="title signup">
             Sign Up
          </div>
       </div>
       <div class="form-container">
          <div class="slide-controls">
             <input type="radio" name="slide" id="login" checked>
             <input type="radio" name="slide" id="signup">
             <label for="login" class="slide login">Login</label>
             <label for="signup" class="slide signup">SignUp</label>
             <div class="slider-tab"></div>
          </div>
          <div class="form-inner">
             <!-- Login Form -->
             <form id="loginForm" action="http://localhost:5000/login" method="POST" class="login">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="pass-link">
                   <a href="#">Reset password?</a>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="Login">
                </div>
                <div class="signup-link">
                   Don't have an account? <a href="#">Create a new account</a>
                </div>
             </form>

             <!-- Sign Up Form -->
             <form id="signupForm" action="http://localhost:5000/signup" method="POST" class="signup">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="field">
                   <input type="password" name="confirmPassword" placeholder="Confirm Password" required>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="SignUp">
                </div>
                <div class="signup-link">
                   Already have an account? <a href="#">Login here</a>
                </div>
             </form>
          </div>
       </div>
    </div>

    <script src="style.js"></script>
    <script>
      // Login and SignUp Toggle Handling
      document.getElementById("login").addEventListener("click", () => {
        document.querySelector(".login").style.display = "block";
        document.querySelector(".signup").style.display = "none";
      });
      document.getElementById("signup").addEventListener("click", () => {
        document.querySelector(".signup").style.display = "block";
        document.querySelector(".login").style.display = "none";
      });

      // Handling SignUp Form Submission
      document.getElementById("signupForm").addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevent default form submission

        const email = document.querySelector('input[name="email"]').value;
        const password = document.querySelector('input[name="password"]').value;
        const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;

        // Ensure both passwords match
        if (password !== confirmPassword) {
          alert("Passwords do not match");
          return;
        }

        const response = await fetch('http://localhost:5000/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password })
        });

        const result = await response.json();

        if (response.ok) {
          alert(result.message);
          // Optionally redirect the user or reset the form
        } else {
          alert("Error: " + result.error);
        }
      });
    </script>
  </body>
</html> -->
<!-- 
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Sign Up | Log In</title>
    <link rel="stylesheet" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <div class="wrapper">
       <div class="title-text">
          <div class="title login">
             Login
          </div>
          <div class="title signup">
             Sign Up
          </div>
       </div>
       <div class="form-container">
          <div class="slide-controls">
             <input type="radio" name="slide" id="login" checked>
             <input type="radio" name="slide" id="signup">
             <label for="login" class="slide login">Login</label>
             <label for="signup" class="slide signup">SignUp</label>
             <div class="slider-tab"></div>
          </div>
          <div class="form-inner">
             <!-- Login Form -->
             <form id="loginForm" action="http://localhost:5000/login" method="POST" class="login">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="pass-link">
                   <a href="#">Reset password?</a>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="Login">
                </div>
                <div class="signup-link">
                   Don't have an account? <a href="#">Create a new account</a>
                </div>
             </form>

             <!-- Sign Up Form -->
             <form id="signupForm" action="http://localhost:5000/signup" method="POST" class="signup">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="field">
                   <input type="password" name="confirmPassword" placeholder="Confirm Password" required>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="SignUp">
                </div>
                <div class="signup-link">
                   Already have an account? <a href="#">Login here</a>
                </div>
             </form>
          </div>
       </div>
    </div>

    <script src="style.js"></script>
    <script>
      // Login and SignUp Toggle Handling
      document.getElementById("login").addEventListener("click", () => {
        document.querySelector(".login").style.display = "block";
        document.querySelector(".signup").style.display = "none";
      });
      document.getElementById("signup").addEventListener("click", () => {
        document.querySelector(".signup").style.display = "block";
        document.querySelector(".login").style.display = "none";
      });

      // Handling SignUp Form Submission
      document.getElementById("signupForm").addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevent default form submission

        const email = document.querySelector('input[name="email"]').value;
        const password = document.querySelector('input[name="password"]').value;
        const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;

        // Ensure both passwords match
        if (password !== confirmPassword) {
          alert("Passwords do not match");
          return;
        }

        const response = await fetch('http://localhost:5000/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password })
        });

        const result = await response.json();

        if (response.ok) {
          alert(result.message);
          // Optionally redirect the user or reset the form
        } else {
          alert("Error: " + result.error);
        }
      });
    </script>
  </body>
</html> -->















const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");
require("dotenv").config();

// Initialize Express App
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB Connection
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.error("Error connecting to MongoDB:", err));

// User Schema
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

const User = mongoose.model("User", userSchema);

// Sign-up Route
app.post("/signup", async (req, res) => {
  const { email, password } = req.body;

  // Validate fields
  if (!email || !password) {
    return res.status(400).json({ error: "All fields are required" });
  }

  try {
    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: "User already exists" });
    }

    // Save new user
    const newUser = new User({ email, password });
    await newUser.save();
    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    console.error("Error registering user:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});











<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Sign Up | Log In</title>
    <link rel="stylesheet" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <div class="wrapper">
       <div class="title-text">
          <div class="title login">
             Login
          </div>
          <div class="title signup">
             Sign Up
          </div>
       </div>
       <div class="form-container">
          <div class="slide-controls">
             <input type="radio" name="slide" id="login" checked>
             <input type="radio" name="slide" id="signup">
             <label for="login" class="slide login">Login</label>
             <label for="signup" class="slide signup">SignUp</label>
             <div class="slider-tab"></div>
          </div>
          <div class="form-inner">
             <!-- Login Form -->
             <form id="loginForm" action="http://localhost:5000/login" method="POST" class="login">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="pass-link">
                   <a href="#">Reset password?</a>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="Login">
                </div>
                <div class="signup-link">
                   Don't have an account? <a href="#">Create a new account</a>
                </div>
             </form>
             <div id="loginMessage"></div> <!-- Message Display -->

             <!-- Sign Up Form -->
             <form id="signupForm" action="http://localhost:5000/signup" method="POST" class="signup">
                <div class="field">
                   <input type="email" name="email" placeholder="Email Address" required>
                </div>
                <div class="field">
                   <input type="password" name="password" placeholder="Password" required>
                </div>
                <div class="field">
                   <input type="password" name="confirmPassword" placeholder="Confirm Password" required>
                </div>
                <div class="field btn">
                   <div class="btn-layer"></div>
                   <input type="submit" value="SignUp">
                </div>
                <div class="signup-link">
                   Already have an account? <a href="#">Login here</a>
                </div>
             </form>
          </div>
       </div>
    </div>

    <script src="style.js"></script>
    <script>
      // Login and SignUp Toggle Handling
      document.getElementById("login").addEventListener("click", () => {
        document.querySelector(".login").style.display = "block";
        document.querySelector(".signup").style.display = "none";
      });
      document.getElementById("signup").addEventListener("click", () => {
        document.querySelector(".signup").style.display = "block";
        document.querySelector(".login").style.display = "none";
      });

      // Handling SignUp Form Submission
      document.getElementById("signupForm").addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevent default form submission

        const email = document.querySelector('input[name="email"]').value;
        const password = document.querySelector('input[name="password"]').value;
        const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;

        // Ensure both passwords match
        if (password !== confirmPassword) {
          alert("Passwords do not match");
          return;
        }

        const response = await fetch('http://localhost:5000/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password })
        });

        const result = await response.json();

        if (response.ok) {
          alert(result.message);
          // Optionally redirect the user or reset the form
        } else {
          alert("Error: " + result.error);
        }
      });

      // Handling Login Form Submission
      document.getElementById("loginForm").addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevent default form submission

        const email = document.querySelector('input[name="email"]').value;
        const password = document.querySelector('input[name="password"]').value;

        const response = await fetch('http://localhost:5000/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password })
        });

        const result = await response.json();
        const loginMessage = document.getElementById("loginMessage");

        if (response.ok) {
          loginMessage.textContent = "Login Successful!";
          loginMessage.style.color = "green";
          // Optionally redirect the user or reset the form
        } else {
          loginMessage.textContent = "Login failed: " + result.error;
          loginMessage.style.color = "red";
        }
      });
    </script>
  </body>
</html>













input.html


<!-- input.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review Detective - Input</title>
    <style>
        body {
            background: #f5f5f5;
            font-family: 'Arial', sans-serif;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .input-section {
            margin-bottom: 2rem;
        }

        textarea {
            width: 100%;
            height: 150px;
            padding: 0.8rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }

        .file-upload {
            border: 2px dashed #ddd;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
        }

        button {
            width: 100%;
            padding: 0.8rem;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background: #0056b3;
        }

        .logout-button {
            text-align: center;
            margin-top: 2rem;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Review Analysis</h1>

        <div class="input-section">
            <h2>Text Input</h2>
            <textarea id="reviewText" placeholder="Enter the review text here..."></textarea>
            <button onclick="analyzeText()">Analyze Text</button>
        </div>

        <div class="input-section">
            <h2>File Upload</h2>
            <div class="file-upload" id="dropZone">
                <input type="file" id="fileInput" accept=".csv" style="display: none;">
                <p>Drag and drop a CSV file here or click to select</p>
            </div>
            <button onclick="analyzeFile()">Analyze File</button>
        </div>

        <div class="logout-button">
            <button onclick="logout()">Logout</button>
        </div>
    </div>

    <script>
        // Logout functionality
        async function logout() {
            try {
                await fetch('http://localhost:5000/logout', { method: 'POST' });
                window.location.href = 'login.html';
            } catch (error) {
                alert('Logout failed. Please try again.');
            }
        }

        // Analyze text input
        async function analyzeText() {
            const text = document.getElementById('reviewText').value;

            if (!text) {
                alert('Please enter some text to analyze.');
                return;
            }

            try {
                const response = await fetch('/api/analyze/text', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text })
                });

                if (response.ok) {
                    const result = await response.json();
                    window.location.href = '/output.html?id=' + result.analysisId;
                } else {
                    alert('Analysis failed. Please try again.');
                }
            } catch (error) {
                alert('An error occurred. Please try again.');
            }
        }

        // Analyze CSV file upload
        async function analyzeFile() {
            const file = document.getElementById('fileInput').files[0];

            if (!file) {
                alert('Please select a file to analyze.');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/api/analyze/file', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    window.location.href = '/output.html?id=' + result.analysisId;
                } else {
                    alert('File analysis failed. Please try again.');
                }
            } catch (error) {
                alert('An error occurred. Please try again.');
            }
        }
    </script>

</body>
</html>











input.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review Detective - Input</title>
    <style>
        body {
            background: #f5f5f5;
            font-family: 'Arial', sans-serif;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .input-section {
            margin-bottom: 2rem;
        }

        textarea {
            width: 100%;
            height: 150px;
            padding: 0.8rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }

        button {
            width: 100%;
            padding: 0.8rem;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background: #0056b3;
        }

        .logout-button {
            text-align: center;
            margin-top: 2rem;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Review Analysis</h1>

        <div class="input-section">
            <h2>Text Input</h2>
            <textarea id="reviewText" placeholder="Enter the review text here..."></textarea>
            <button onclick="analyzeText()">Analyze Text</button>
        </div>

        <div class="logout-button">
            <button onclick="logout()">Logout</button>
        </div>
    </div>

    <script>
        // Logout functionality
        async function logout() {
            try {
                await fetch('http://localhost:5000/logout', { method: 'POST' });
                window.location.href = 'login.html';
            } catch (error) {
                alert('Logout failed. Please try again.');
            }
        }

        // Analyze text input
        async function analyzeText() {
            const text = document.getElementById('reviewText').value;

            if (!text) {
                alert('Please enter some text to analyze.');
                return;
            }

            try {
                const response = await fetch('/api/analyze/text', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text })
                });

                if (response.ok) {
                    const result = await response.json();
                    window.location.href = '/output.html?id=' + result.analysisId;
                } else {
                    alert('Analysis failed. Please try again.');
                }
            } catch (error) {
                alert('An error occurred. Please try again.');
            }
        }
    </script>

</body>
</html>









server.js// const express = require("express");
// const mongoose = require("mongoose");
// const bodyParser = require("body-parser");
// const cors = require("cors");
// require("dotenv").config();

// // Initialize Express App
// const app = express();
// const PORT = process.env.PORT || 5000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json());

// // MongoDB Connection
// mongoose
//   .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
//   .then(() => console.log("Connected to MongoDB Atlas"))
//   .catch((err) => console.error("Error connecting to MongoDB:", err));

// // User Schema
// const userSchema = new mongoose.Schema({
//   email: { type: String, required: true, unique: true },
//   password: { type: String, required: true },
// });

// const User = mongoose.model("User", userSchema);

// // Sign-up Route
// app.post("/signup", async (req, res) => {
//   const { email, password } = req.body;

//   // Validate fields
//   if (!email || !password) {
//     return res.status(400).json({ error: "All fields are required" });
//   }

//   try {
//     // Check if user already exists
//     const existingUser = await User.findOne({ email });
//     if (existingUser) {
//       return res.status(400).json({ error: "User already exists" });
//     }

//     // Save new user
//     const newUser = new User({ email, password });
//     await newUser.save();
//     res.status(201).json({ message: "User registered successfully" });
//   } catch (err) {
//     console.error("Error registering user:", err);
//     res.status(500).json({ error: "Internal server error" });
//   }
// });

// // Login Route
// app.post("/login", async (req, res) => {
//   const { email, password } = req.body;

//   // Validate fields
//   if (!email || !password) {
//     return res.status(400).json({ error: "Email and password are required" });
//   }

//   try {
//     // Find user by email
//     const user = await User.findOne({ email });
//     if (!user) {
//       return res.status(400).json({ error: "Invalid email or password" });
//     }

//     // Check if passwords match
//     if (user.password !== password) {
//       return res.status(400).json({ error: "Invalid email or password" });
//     }

//     res.status(200).json({ message: "Login successful" });
//   } catch (err) {
//     console.error("Error logging in:", err);
//     res.status(500).json({ error: "Internal server error" });
//   }
// });

// // Start Server
// app.listen(PORT, () => {
//   console.log(`Server running on http://localhost:${PORT}`);
// });


const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB Connection
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.error("Error connecting to MongoDB:", err));

// User Schema
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

const User = mongoose.model("User", userSchema);

// Review Schema
const reviewSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: "User" },
  reviewText: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
});

const Review = mongoose.model("UserReview", reviewSchema);

// Sign-up Route
app.post("/signup", async (req, res) => {
  const { email, password } = req.body;

  // Validate fields
  if (!email || !password) {
    return res.status(400).json({ error: "All fields are required" });
  }

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: "User already exists" });
    }

    const newUser = new User({ email, password });
    await newUser.save();
    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    console.error("Error registering user:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Login Route
app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  // Validate fields
  if (!email || !password) {
    return res.status(400).json({ error: "Email and password are required" });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: "Invalid email or password" });
    }

    if (user.password !== password) {
      return res.status(400).json({ error: "Invalid email or password" });
    }

    // Successful login, send a success response with a redirect instruction
    res.status(200).json({ message: "Login successful", redirect: "input.html" });
  } catch (err) {
    console.error("Error logging in:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Route to save user review
app.post("/api/reviews", async (req, res) => {
  const { userId, reviewText } = req.body;

  // Validate fields
  if (!userId || !reviewText) {
    return res.status(400).json({ error: "User ID and review text are required" });
  }

  try {
    // Save the review to the "user-reviews" collection
    const newReview = new Review({ userId, reviewText });
    await newReview.save();

    res.status(201).json({ message: "Review saved successfully", review: newReview });
  } catch (err) {
    console.error("Error saving review:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
